{"version":3,"file":"bundle.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  useEffect,\n  useState,\n  useRef,\n  useMemo,\n  RefObject,\n  MutableRefObject,\n} from \"react\";\n\ntype ObservedSize = {\n  width: number | undefined;\n  height: number | undefined;\n};\n\ntype ResizeHandler = (size: ObservedSize) => void;\n\n// Type definition when the user wants the hook to provide the ref with the given type.\nfunction useResizeObserver<T extends HTMLElement>(opts?: {\n  onResize?: ResizeHandler;\n}): { ref: RefObject<T> } & ObservedSize;\n\n// Type definition when the hook just passes through the user provided ref.\nfunction useResizeObserver<T extends HTMLElement>(opts?: {\n  ref: RefObject<T>;\n  onResize?: ResizeHandler;\n}): { ref: RefObject<T> } & ObservedSize;\n\nfunction useResizeObserver<T>(\n  opts: {\n    ref?: RefObject<T>;\n    onResize?: ResizeHandler;\n  } = {}\n): { ref: RefObject<T> } & ObservedSize {\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  const defaultRef = useRef<T>(null);\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n  const onResize = opts.onResize;\n  const onResizeRef = useRef<ResizeHandler | undefined>(undefined);\n  onResizeRef.current = onResize;\n\n  // Using a single instance throughought the hook's lifetime\n  const resizeObserverRef = useRef<ResizeObserver>() as MutableRefObject<\n    ResizeObserver\n  >;\n\n  const ref = opts.ref || defaultRef;\n  const [size, setSize] = useState<{\n    width?: number;\n    height?: number;\n  }>({\n    width: undefined,\n    height: undefined,\n  });\n\n  // Using a ref to track the previous width / height to avoid unnecessary renders\n  const previous: {\n    current: {\n      width?: number;\n      height?: number;\n    };\n  } = useRef({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      // Since we only observe the one element, we don't need to loop over the\n      // array\n      if (!entries.length) {\n        return;\n      }\n\n      const entry = entries[0];\n\n      // jedierikb says, 'that is not quite right'\n      // `Math.round` is in line with how CSS resolves sub-pixel values\n      const newWidth = entry.contentRect.width;\n      const newHeight = entry.contentRect.height;\n      if (\n        previous.current.width !== newWidth ||\n        previous.current.height !== newHeight\n      ) {\n        const newSize = { width: newWidth, height: newHeight };\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (\n      typeof ref !== \"object\" ||\n      ref === null ||\n      !(ref.current instanceof Element)\n    ) {\n      return;\n    }\n\n    const element = ref.current;\n\n    resizeObserverRef.current.observe(element);\n\n    return () => resizeObserverRef.current.unobserve(element);\n  }, [ref]);\n\n  return useMemo(() => ({ ref, width: size.width, height: size.height }), [\n    ref,\n    size ? size.width : null,\n    size ? size.height : null,\n  ]);\n}\n\nexport default useResizeObserver;\n"],"names":["useResizeObserver","opts","defaultRef","useRef","onResize","onResizeRef","undefined","current","resizeObserverRef","ref","useState","width","height","size","setSize","previous","useEffect","ResizeObserver","entries","Array","isArray","length","entry","newWidth","contentRect","newHeight","newSize","Element","element","observe","unobserve","useMemo"],"mappings":"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"}